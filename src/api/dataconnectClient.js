// Auto-generated by scripts/generateDataConnectClient.js
// Schema source: dataconnect/schema/schema.gql
const ENDPOINT = process.env.REACT_APP_DATA_CONNECT_URL;

async function graphqlRequest(query, variables = {}, authToken) {
  const res = await fetch(ENDPOINT, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      ...(authToken ? { Authorization: `Bearer ${authToken}` } : {})
    },
    body: JSON.stringify({ query, variables })
  });
  const json = await res.json();
  if (json.errors) throw new Error(json.errors.map(e => e.message).join(', '));
  return json.data;
}

export async function insertUser(data, authToken) {
  const mutation = `mutation InsertUser($data: UserInsertInput!) { user_insert(data: $data) { id } }`;
  return graphqlRequest(mutation, { data }, authToken);
}

export async function insertHangoutEvent(data, authToken) {
  const mutation = `mutation InsertHangoutEvent($data: HangoutEventInsertInput!) { hangoutEvent_insert(data: $data) { id } }`;
  return graphqlRequest(mutation, { data }, authToken);
}

export async function insertParticipation(data, authToken) {
  const mutation = `mutation InsertParticipation($data: ParticipationInsertInput!) { participation_insert(data: $data) { id } }`;
  return graphqlRequest(mutation, { data }, authToken);
}

export async function insertFriendship(data, authToken) {
  const mutation = `mutation InsertFriendship($data: FriendshipInsertInput!) { friendship_insert(data: $data) { id } }`;
  return graphqlRequest(mutation, { data }, authToken);
}

export async function insertMessage(data, authToken) {
  const mutation = `mutation InsertMessage($data: MessageInsertInput!) { message_insert(data: $data) { id } }`;
  return graphqlRequest(mutation, { data }, authToken);
}

export { graphqlRequest };
