// scripts/generateDataConnectClient.js
const fs = require("fs");
const path = require("path");

const schemaPath = path.join(__dirname, "..", "dataconnect", "schema", "schema.gql");
const schema = fs.readFileSync(schemaPath, "utf8");

const typeRegex = /type\s+(\w+)\s+@table/g;
const types = [];
let match;
while ((match = typeRegex.exec(schema)) !== null) {
  types.push(match[1]);
}

let operations = "";
for (const type of types) {
  const camel = type.charAt(0).toLowerCase() + type.slice(1);
  operations += `export async function insert${type}(data, authToken) {\n` +
    `  const mutation = \`mutation Insert${type}($data: ${type}InsertInput!) { ${camel}_insert(data: $data) { id } }\`;\n` +
    `  return graphqlRequest(mutation, { data }, authToken);\n` +
    `}\n\n`;
}

const output = `// Auto-generated by scripts/generateDataConnectClient.js
// Schema source: dataconnect/schema/schema.gql

const ENDPOINT = process.env.REACT_APP_DATA_CONNECT_URL;

if (!ENDPOINT) {
  throw new Error("Missing REACT_APP_DATA_CONNECT_URL. Please set it in your .env file.");
}

async function graphqlRequest(query, variables = {}, authToken) {
  const res = await fetch(ENDPOINT, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      ...(authToken ? { Authorization: \`Bearer \${authToken}\` } : {}),
    },
    body: JSON.stringify({ query, variables }),
  });

  if (!res.ok) {
    throw new Error(\`GraphQL request failed: \${res.status} \${res.statusText}\`);
  }

  const json = await res.json();
  if (json.errors) throw new Error(json.errors.map((e) => e.message).join(", "));
  return json.data;
}

${operations}
export { graphqlRequest };
`;

const outputPath = path.join(__dirname, "..", "src", "api");
if (!fs.existsSync(outputPath)) {
  fs.mkdirSync(outputPath, { recursive: true });
}
fs.writeFileSync(path.join(outputPath, "dataconnectClient.js"), output);
console.log("Generated client with insert functions for:", types.join(", "));
