const fs = require('fs');
const path = require('path');

const schemaPath = path.join(__dirname, '..', 'dataconnect', 'schema', 'schema.gql');
const schema = fs.readFileSync(schemaPath, 'utf8');
const typeRegex = /type\s+(\w+)\s+@table/g;
const types = [];
let match;
while ((match = typeRegex.exec(schema)) !== null) {
  types.push(match[1]);
}

let operations = '';
for (const type of types) {
  const camel = type.charAt(0).toLowerCase() + type.slice(1);
  operations += `export async function insert${type}(data, authToken) {\n` +
    `  const mutation = \`mutation Insert${type}($data: ${type}InsertInput!) { ${camel}_insert(data: $data) { id } }\`;\n` +
    `  return graphqlRequest(mutation, { data }, authToken);\n` +
    `}\n\n`;
}

const output = `// Auto-generated by scripts/generateDataConnectClient.js\n` +
`// Schema source: dataconnect/schema/schema.gql\n` +
`const ENDPOINT = process.env.REACT_APP_DATA_CONNECT_URL;\n\n` +
`async function graphqlRequest(query, variables = {}, authToken) {\n` +
`  const res = await fetch(ENDPOINT, {\n` +
`    method: 'POST',\n` +
`    headers: {\n` +
`      'Content-Type': 'application/json',\n` +
`      ...(authToken ? { Authorization: \`Bearer \${authToken}\` } : {})\n` +
`    },\n` +
`    body: JSON.stringify({ query, variables })\n` +
`  });\n` +
`  const json = await res.json();\n` +
`  if (json.errors) throw new Error(json.errors.map(e => e.message).join(', '));\n` +
`  return json.data;\n` +
`}\n\n` +
operations +
`export { graphqlRequest };\n`;

const outputPath = path.join(__dirname, '..', 'src', 'api');
if (!fs.existsSync(outputPath)) {
  fs.mkdirSync(outputPath, { recursive: true });
}
fs.writeFileSync(path.join(outputPath, 'dataconnectClient.js'), output);
console.log('Generated client with insert functions for:', types.join(', '));
